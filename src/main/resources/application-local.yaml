server:
  port: 38103

spring:
  application:
    name: consulting
  threads:
    virtual:
      enabled: true

  datasource:
    url: jdbc:postgresql://localhost:38121/consulting?serverTimezone=UTC&useSSL=true&autoReconnect=true&useUnicode=true&characterEncoding=utf-8&reWriteBatchedInserts=true
    username: lgcms
    password: 1234
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-test-query: SELECT 1
      validation-timeout: 5000

  jpa:
    hibernate:
      ddl-auto: update
    generate-ddl: true
    show-sql: true
    open-in-view: false

  kafka:
    bootstrap-servers: localhost:38123

    listener:
      ack-mode: manual_immediate

    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      enable-auto-commit: false
      auto-offset-reset: latest
      max-poll-records: 10
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false

  cloud:
    openfeign:
      client:
        config:
          RemoteLectureService:
            url: http://localhost:38106

  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always
      schema: classpath:org/springframework/batch/core/schema-postgresql.sql

  data:
    redis:
      host: localhost
      port: 38122
      database-lock: 7
      config:
        connectionPoolSize: 10
        connectionMinimumIdleSize: 5
        subscriptionConnectionPoolSize: 5
        subscriptionConnectionMinimumIdleSize: 1
        idleConnectionTimeout: 10000
        connectTimeout: 10000
        timeout: 3000
management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,info
  metrics:
    tags:
      application: ${spring.application.name}
